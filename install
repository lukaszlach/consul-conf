#!/usr/bin/env bash
# Consul.conf
# (c) 2018 ≈Åukasz Lach <llach@llach.pl>
set -e
DOCKER_IMAGE=lukaszlach/consul-conf
DOCKER_TAG=${CONSUL_CONF_VERSION:-latest}
[ "$DOCKER_TAG" == "master" ] && DOCKER_TAG=latest
PROJECT_NAME=Consul.conf
PROJECT_VERSION="$DOCKER_TAG"
PROJECT_PORT=8080
PROJECT_URL="https://github.com/lukaszlach/consul-conf"
DOCKER_CONTAINER_NAME=consul_conf
DOCKER_PULL_IMAGE="${DOCKER_PULL_IMAGE:-1}"
START_SCRIPT_FILE=/usr/local/bin/consul-conf-start
STOP_SCRIPT_FILE=/usr/local/bin/consul-conf-stop
ETC_DIR=/etc/consul-conf
VAR_DIR=/var/consul-conf
CONF_FILE="$ETC_DIR/consul-conf.conf"
CONSUL_API_HOSTNAME="$HOSTNAME"
CONSUL_API_PORT=8500
log () { echo -e "\033[0;30m->\033[0m $@"; }

echo -e "\033[1;30m$PROJECT_NAME\033[0m"
if ! command -v "docker" > /dev/null 2>&1; then
    log "Error: Docker not found, visit https://docs.docker.com/engine/installation/ or run 'curl -sS https://get.docker.com/ | bash' to install newest stable version."
    exit 1
fi
if ! command -v "docker-compose" > /dev/null 2>&1; then
    log "Error: docker-compose command not found, visit https://docs.docker.com/compose/install/"
    exit 1
fi

log "Stopping $PROJECT_NAME"
if [ -f "$STOP_SCRIPT_FILE" ]; then
    "$STOP_SCRIPT_FILE" &>/dev/null || true
fi
(
    docker stop "$DOCKER_CONTAINER_NAME" || true
    docker rm -f "$DOCKER_CONTAINER_NAME" || true
) &>/dev/null
if [[ "$DOCKER_PULL_IMAGE" == "1" ]]; then
    log "Pulling version $DOCKER_TAG"
    docker pull "$DOCKER_IMAGE:$DOCKER_TAG"
fi
# configure
if nc -z 127.0.0.1 "$PROJECT_PORT" < /dev/null; then
    log "Warning: Port $PROJECT_PORT is currently opened, make sure it's closed before running $PROJECT_NAME."
fi
if ! nc -z "$HOSTNAME" "$CONSUL_API_PORT" < /dev/null; then
    log "Warning: Consul API does not listen locally on port $CONSUL_API_PORT, $PROJECT_NAME will be unhealthy after running. Make sure to change this setting in $CONF_FILE"
fi
if [ ! -f "$ETC_DIR/https/cert.pem" ]; then
    log "Notice: Place cert.pem and key.pem certificates under $ETC_DIR/https directory to serve $PROJECT_NAME over HTTPs."
fi

rm -rf "$VAR_DIR"
mkdir -p "$ETC_DIR" "$VAR_DIR"
# docker-compose.yml file
log "Creating $ETC_DIR/docker-compose.yml"
cat > "$ETC_DIR/docker-compose.yml" << EOF
# $PROJECT_NAME $PROJECT_VERSION
# WARNING: Do NOT edit this file, modify your settings in $CONF_FILE
version: '3'

services:
  consul-conf:
    image: $DOCKER_IMAGE:$DOCKER_TAG
    container_name: $DOCKER_CONTAINER_NAME
    restart: unless-stopped
    ports:
        - \${HTTP_PORT:-8080}:80
#ssl        - \${HTTPS_PORT:-443}:443
    volumes:
        - $ETC_DIR:/etc/consul-conf
    environment:
      - "HTTP_PORT=\${HTTP_PORT:-8080}"
#ssl      - "HTTPS_PORT=\${HTTPS_PORT:-443}"
      - "HTTP_ALLOW=\${HTTP_ALLOW}"
      - "CRYPT_KEY=\${CRYPT_KEY}"
      - "CONSUL_API_URL=\${CONSUL_API_URL:-http://consul.service.consul:$CONSUL_API_PORT}"
      - "CONSUL_ACL_TOKEN=\${CONSUL_ACL_TOKEN}"
      - "BASIC_AUTH=\${BASIC_AUTH}"
      - "LDAP_ENABLED=\${LDAP_ENABLED:-0}"
      - "LDAP_URL=\${LDAP_URL}"
      - "LDAP_ATTR_UID=\${LDAP_ATTR_UID:-uid}"
      - "LDAP_BIND_DN=\${LDAP_BIND_DN}"
      - "NOTIFY_HIPCHAT=\${NOTIFY_HIPCHAT:-0}"
      - "HIPCHAT_API=\${HIPCHAT_API}"
      - "HIPCHAT_ROOM=\${HIPCHAT_ROOM}"
      - "HIPCHAT_TOKEN=\${HIPCHAT_TOKEN}"
      - "NOTIFY_SLACK=\${NOTIFY_SLACK:-0}"
      - "SLACK_ROOM=\${SLACK_ROOM}"
      - "SLACK_URL=\${SLACK_URL}"
EOF
# configuration file
if [ ! -f "$CONF_FILE" ]; then
    log "Creating $CONF_FILE"
    cat > "$CONF_FILE" << EOF
HTTP_PORT=8080
HTTPS_PORT=443
HTTP_ALLOW=0.0.0.0/0
CRYPT_KEY=

# Consul
CONSUL_API_URL=http://$CONSUL_API_HOSTNAME:$CONSUL_API_PORT
CONSUL_ACL_TOKEN=

# Authorization
BASIC_AUTH=
LDAP_ENABLED=0
LDAP_URL=
LDAP_ATTR_UID=
LDAP_BIND_DN=

# Notifications
NOTIFY_SLACK=0
SLACK_ROOM=
SLACK_URL=

NOTIFY_HIPCHAT=0
HIPCHAT_API=
HIPCHAT_ROOM=
HIPCHAT_TOKEN=
EOF
fi
# start/stop scripts
log "Creating $START_SCRIPT_FILE"
cat > "$START_SCRIPT_FILE" << EOF
#!/usr/bin/env bash
set -e
cd $ETC_DIR
COMPOSE_FILE=./docker-compose.yml
if [ -f ./https/cert.pem ] && [ -f ./https/key.pem ]; then
    HTTPS_COMPOSE_FILE=./.docker-compose.https.yml
    cp -f "\$COMPOSE_FILE" "\$HTTPS_COMPOSE_FILE"
    sed -i 's/^#ssl//' "\$HTTPS_COMPOSE_FILE"
    COMPOSE_FILE="\$HTTPS_COMPOSE_FILE"
fi
# export all variables from config file
set -a
. $CONF_FILE
set +a
docker-compose -f "\$COMPOSE_FILE" up -d &>/dev/null
echo "$PROJECT_NAME $PROJECT_VERSION started"
exit 0
EOF
log "Creating $STOP_SCRIPT_FILE"
cat > "$STOP_SCRIPT_FILE" << EOF
#!/usr/bin/env bash
set -e
(
    docker stop `docker ps | grep $DOCKER_CONTAINER_NAME | cut -d' ' -f1` || true
    docker rm -f $DOCKER_CONTAINER_NAME
) &>/dev/null
echo "$PROJECT_NAME $PROJECT_VERSION stopped"
exit 0
EOF

chmod +x "$START_SCRIPT_FILE" "$STOP_SCRIPT_FILE"
log "Starting $PROJECT_NAME"

if "$START_SCRIPT_FILE"; then
    printf "\033[1;30m\n"
    echo "$PROJECT_NAME $PROJECT_VERSION installed and running."
else
    printf "\033[1;30m\n"
    echo "$PROJECT_NAME $PROJECT_VERSION installed but failed to run."
fi
printf "\033[0;30m"
echo "Reach the web interface on http://$HOSTNAME:$PROJECT_PORT/ or on port number defined in $CONF_FILE"
echo "Visit $PROJECT_URL to check how to create your first dashboard and customize it and it's fields."
printf "\n\033[0m"
exit 0